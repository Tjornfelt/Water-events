<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetDir)APE.Umbraco.dll" #>
<#@ import namespace="APE.Umbraco.Core"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Microsoft.CSharp"#>
<#@ include file="..\APE\FileManager.ttinclude" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#

	var manager = TemplateFileManager.Create(this);


	var code = new CodeGenerationTools(this);
	var namespaceHint = code.VsNamespaceSuggestion() ?? "blah";	

	var hostServiceProvider = (IServiceProvider)this.Host;
	var host = this.Host as ITextTemplatingEngineHost;
	var dte = (DTE)hostServiceProvider.GetService(typeof(DTE));
	var project = dte.Solution.FindProjectItem(host.TemplateFile).ContainingProject;

	var dataDir =  host.ResolveAssemblyReference("$(ProjectDir)")+@"App_Data\";

	System.Configuration.Configuration config = null;
	
	foreach (ProjectItem item in project.ProjectItems)
	{
		if (Regex.IsMatch(item.Name,"(app|web).config",RegexOptions.IgnoreCase))
		{
			config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap() { ExeConfigFilename = item.FileNames[0] }, ConfigurationUserLevel.None);
		}
	}
  
	
	var connectionSetting = config.ConnectionStrings.ConnectionStrings["umbracoDbDSN"];

	var docTypesData = DBConnection.GetDocTypes(dataDir,connectionSetting);
	var docTypes = docTypesData.GroupBy(i => new {i.DocType, i.ParentDocType, i.DocTypeAlias}, 
	i => new{i.PropertyAlias, i.PropertyAliasText, i.PropertyDescription, i.PropertyType, i.PropertyTypeAlias}).ToList();





manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:<#= System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion() #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---
<# 
manager.EndBlock();







#>
namespace <#= namespaceHint #>
{
    public static class DocTypes
    {
<# foreach(var docType in docTypes)
{
    var docTypeKey = docType.Key.DocType;
		#>
        private static <#=docTypeKey#> _<#=docTypeKey#>;
        public static <#=docTypeKey#> <#=docTypeKey#>
        {
            get { return _<#=docTypeKey#> ?? (_<#=docTypeKey#> = new <#=docTypeKey#>()); }
        }
<# 
        }
	#>
    }
}

<#





foreach(var docType in docTypes)
{
var docTypeKey = docType.Key.DocType;
var parentDocType = docTypes.FirstOrDefault(x => x.Key.DocTypeAlias == docType.Key.ParentDocType);

manager.StartNewFile(docTypeKey+".cs");

#>
using System;
using APE.Umbraco;
namespace <#= namespaceHint #>
{
    public partial class <#=docTypeKey#> <# if(parentDocType != null){ #>: <#=parentDocType.Key.DocType #><#} #>

    {

		public <#=docTypeKey#>()<# if(!string.IsNullOrWhiteSpace(docType.Key.ParentDocType) && docTypes.Any(x => x.Key.DocType == docType.Key.ParentDocType)){ #>: base()<#} #>
		
		{
		<#foreach(var property in docType.Where(x => !string.IsNullOrWhiteSpace(x.PropertyAlias)))
    {#>
	this.<#=property.PropertyAliasText#> = new <#=property.PropertyTypeAlias#>(){ Alias = "<#=property.PropertyAlias#>" };
		<# } #>
		
		}

		<# if (!string.IsNullOrWhiteSpace(docType.Key.ParentDocType) &&
                       docTypes.Any(x => x.Key.DocType == docType.Key.ParentDocType))
{
		#>[Obsolete("Use the implicit operator... Just remove the .DocTypeAlias")]
		new <# } #>public readonly string DocTypeAlias = "<#=docType.Key.DocTypeAlias#>";

		public static implicit operator string(<#=docTypeKey#> doctype)
		{
			return "<#=docType.Key.DocTypeAlias#>";
		}
	 <#foreach(var property in docType.Where(x => !string.IsNullOrWhiteSpace(x.PropertyAlias))){#>
		
				
		/// <summary>
		///		<para>Datatype: <#=property.PropertyType#></para>
<#if(!string.IsNullOrWhiteSpace(property.PropertyDescription)){#>
		///		<para>Description: <#=property.PropertyDescription#></para>
<#}#>
		/// </summary>
		public <#=property.PropertyTypeAlias#> <#=property.PropertyAliasText#> { get; private set; }<#}#>

	}
}
<#
}  
manager.Process();
#>